GIT SUBMODULES:
   The Thirdparties are submodules of this repository. To add a new Thirdparty git submodule:
      git submodule add <REPO URL> Thirdparty/<EXCHANGE NAME>

   When first cloning the repo, these folders will be empty. To populate them, run from the project root
      git submodule init

   To update the submodule with the changes from its repo:
      git submodule update

EXCHANGE BACKENDS: FACTORY PATTERN:
   1- Any new backend needs to be as a class, called wrap<Exchange>.py, and has to 
      inherit from the abstract class exchange.
   2- exchangeFactory.py needs to be updated to detect and return the added exchange
      when requested. Also, to import the new added class.


ABOUT PACKAGES AND IMPORTS:

Since we want to run scripts both from the project root folder and from subfolders,
we need to handle imports correctly. From researching the internet for solutions
these three methods look the best to me. All of them use only absolute imports which is
the recomended way of importing in Python3.

1. Give your project a setup.py and use pip install -e . in a virtualenv for this project. This is probably
   the standard method.

2. Use absolute imports rooted at the test/ directory (i.e. middle column in the table above). This
   guarantees that running start.py directly will always work. In order to run a2.py directly, run it as an
   imported module instead of as a script:
        1) change directories to test/ in the console
        2) python -m packA.a2

3. Use absolute imports rooted at the test/ directory, and add test/ to the PYTHONPATH environment variable.


BINANCE SSL CERTIFICATE PROBLEM
-------------------------------------

Currently, we use CERT_NONE for ssl with Binance due to an issue with websocket package
The other option would be to use proper certificate file. For example:

export WEBSOCKET_CLIENT_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt

and then run application.


ssl.get_server_certificate(('stream.binance.com',9443))
sslopt={'certfile':'/home/vladimir/work/autoTrader/exchanges/WS/binance.pem'}

Docker image
------------

The docker image can be built using the command

   $ docker build -t autotrader:latest .

and run using

   $ git clone https://github.com/mherkazandjian/autotrader.git
   $ cd autotrader
   $ docker run -it --rm \
       -e DISPLAY=$DISPLAY \
       -v $PWD:/home/developer/autotrader \
       -v /tmp/.X11-unix:/tmp/.X11-unix \
       -v $HOME/.Xauthority:/home/developer/.Xauthority \
       --net=host autotrader
